// WARNING: DO NOT EDIT THIS FILE. THIS FILE IS MANAGED BY SPRING ROO.
// You may push code into the target .java compilation unit if you wish to edit any member(s).

package ve.gob.iribarren.tube.model;

import java.security.SecureRandom;
import java.util.ArrayList;
import java.util.Calendar;
import java.util.GregorianCalendar;
import java.util.Iterator;
import java.util.List;
import java.util.Random;
import javax.validation.ConstraintViolation;
import javax.validation.ConstraintViolationException;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Component;
import ve.gob.iribarren.tube.model.Multimedia;
import ve.gob.iribarren.tube.model.MultimediaDataOnDemand;
import ve.gob.iribarren.tube.repository.MultimediaRepository;

privileged aspect MultimediaDataOnDemand_Roo_DataOnDemand {
    
    declare @type: MultimediaDataOnDemand: @Component;
    
    private Random MultimediaDataOnDemand.rnd = new SecureRandom();
    
    private List<Multimedia> MultimediaDataOnDemand.data;
    
    @Autowired
    MultimediaRepository MultimediaDataOnDemand.multimediaRepository;
    
    public Multimedia MultimediaDataOnDemand.getNewTransientMultimedia(int index) {
        Multimedia obj = new Multimedia();
        setActive(obj, index);
        setCreated(obj, index);
        setCreatedBy(obj, index);
        setDescription(obj, index);
        setFilename(obj, index);
        setMimeType(obj, index);
        setOriginalFilename(obj, index);
        setPlaysCount(obj, index);
        setTitle(obj, index);
        setType(obj, index);
        setUpdated(obj, index);
        setUpdatedBy(obj, index);
        return obj;
    }
    
    public void MultimediaDataOnDemand.setActive(Multimedia obj, int index) {
        Boolean active = true;
        obj.setActive(active);
    }
    
    public void MultimediaDataOnDemand.setCreated(Multimedia obj, int index) {
        Calendar created = Calendar.getInstance();
        obj.setCreated(created);
    }
    
    public void MultimediaDataOnDemand.setCreatedBy(Multimedia obj, int index) {
        String createdBy = "createdBy_" + index;
        if (createdBy.length() > 255) {
            createdBy = createdBy.substring(0, 255);
        }
        obj.setCreatedBy(createdBy);
    }
    
    public void MultimediaDataOnDemand.setDescription(Multimedia obj, int index) {
        String description = "description_" + index;
        obj.setDescription(description);
    }
    
    public void MultimediaDataOnDemand.setFilename(Multimedia obj, int index) {
        String filename = "filename_" + index;
        if (filename.length() > 255) {
            filename = new Random().nextInt(10) + filename.substring(1, 255);
        }
        obj.setFilename(filename);
    }
    
    public void MultimediaDataOnDemand.setMimeType(Multimedia obj, int index) {
        String mimeType = "mimeType_" + index;
        if (mimeType.length() > 255) {
            mimeType = mimeType.substring(0, 255);
        }
        obj.setMimeType(mimeType);
    }
    
    public void MultimediaDataOnDemand.setOriginalFilename(Multimedia obj, int index) {
        String originalFilename = "originalFilename_" + index;
        if (originalFilename.length() > 255) {
            originalFilename = originalFilename.substring(0, 255);
        }
        obj.setOriginalFilename(originalFilename);
    }
    
    public void MultimediaDataOnDemand.setPlaysCount(Multimedia obj, int index) {
        Long playsCount = new Integer(index).longValue();
        obj.setPlaysCount(playsCount);
    }
    
    public void MultimediaDataOnDemand.setTitle(Multimedia obj, int index) {
        String title = "title_" + index;
        if (title.length() > 100) {
            title = title.substring(0, 100);
        }
        obj.setTitle(title);
    }
    
    public void MultimediaDataOnDemand.setType(Multimedia obj, int index) {
        String type = String.valueOf(index);
        if (type.length() > 1) {
            type = type.substring(0, 1);
        }
        obj.setType(type);
    }
    
    public void MultimediaDataOnDemand.setUpdated(Multimedia obj, int index) {
        Calendar updated = Calendar.getInstance();
        obj.setUpdated(updated);
    }
    
    public void MultimediaDataOnDemand.setUpdatedBy(Multimedia obj, int index) {
        String updatedBy = "updatedBy_" + index;
        if (updatedBy.length() > 255) {
            updatedBy = updatedBy.substring(0, 255);
        }
        obj.setUpdatedBy(updatedBy);
    }
    
    public Multimedia MultimediaDataOnDemand.getSpecificMultimedia(int index) {
        init();
        if (index < 0) {
            index = 0;
        }
        if (index > (data.size() - 1)) {
            index = data.size() - 1;
        }
        Multimedia obj = data.get(index);
        Long id = obj.getId();
        return multimediaRepository.findOne(id);
    }
    
    public Multimedia MultimediaDataOnDemand.getRandomMultimedia() {
        init();
        Multimedia obj = data.get(rnd.nextInt(data.size()));
        Long id = obj.getId();
        return multimediaRepository.findOne(id);
    }
    
    public boolean MultimediaDataOnDemand.modifyMultimedia(Multimedia obj) {
        return false;
    }
    
    public void MultimediaDataOnDemand.init() {
        int from = 0;
        int to = 10;
        data = multimediaRepository.findAll(new org.springframework.data.domain.PageRequest(from / to, to)).getContent();
        if (data == null) {
            throw new IllegalStateException("Find entries implementation for 'Multimedia' illegally returned null");
        }
        if (!data.isEmpty()) {
            return;
        }
        
        data = new ArrayList<Multimedia>();
        for (int i = 0; i < 10; i++) {
            Multimedia obj = getNewTransientMultimedia(i);
            try {
                multimediaRepository.save(obj);
            } catch (final ConstraintViolationException e) {
                final StringBuilder msg = new StringBuilder();
                for (Iterator<ConstraintViolation<?>> iter = e.getConstraintViolations().iterator(); iter.hasNext();) {
                    final ConstraintViolation<?> cv = iter.next();
                    msg.append("[").append(cv.getRootBean().getClass().getName()).append(".").append(cv.getPropertyPath()).append(": ").append(cv.getMessage()).append(" (invalid value = ").append(cv.getInvalidValue()).append(")").append("]");
                }
                throw new IllegalStateException(msg.toString(), e);
            }
            multimediaRepository.flush();
            data.add(obj);
        }
    }
    
}
